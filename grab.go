package main

import (
	"encoding/json"
	"fmt"
	"os/exec"
)

func main() {
	// Assuming you have JSON data in a variable called jsonData
	// JSON data
	cmd, err := exec.Command("oc", "get", "pods", "--all-namespaces", "-o", "json").Output()

	if err != nil {
		fmt.Println("error: ", err)
	}

	// Parse the JSON data into struct
	var data AutoGenerated
	if err := json.Unmarshal([]byte(cmd), &data); err != nil {
		fmt.Println("Error:", err)
		return
	}

	outputMap := make(map[string]Output)

	var sumCPURequest float64
	var sumMemoryRequest float64
	var sumCPULimit float64
	var sumMemoryLimit float64

	// Iterate over each item and calculate the total CPU requests and limits
	for _, item := range data.Items {
		namespace := item.Metadata.Namespace
		cpuRequest := parseCPUQuantity(item.Spec.Containers[0].Resources.Requests.CPU)
		cpuLimit := parseCPUQuantity(item.Spec.Containers[0].Resources.Limits.CPU)
		memoryRequest := parseCPUQuantity(item.Spec.Containers[0].Resources.Requests.Memory)
		memoryLimit := parseCPUQuantity(item.Spec.Containers[0].Resources.Limits.Memory)

		sumCPURequest += cpuRequest
		sumMemoryLimit += memoryLimit
		sumCPULimit += cpuLimit
		sumMemoryRequest += memoryRequest

		output := outputMap[namespace]
		output.Namespace = namespace
		output.CPURequest += cpuRequest
		output.CPULimit += cpuLimit
		output.MemoryRequest += memoryRequest
		output.MemoryLimit += memoryLimit

		outputMap[namespace] = output
	}
	result := map[string]float64{
		"total_cpu_requests":    sumCPURequest,
		"total_memory_requests": sumMemoryRequest,
		"total_cpu_limits":      sumCPULimit,
		"total_memory_limits":   sumMemoryLimit,
	}
	jsonResult, err := json.Marshal(result)
	if err != nil {
		fmt.Println("Error", err)
		return
	}

	// Convert the output map into a slice
	outputSlice := make([]Output, 0, len(outputMap))
	for _, output := range outputMap {
		outputSlice = append(outputSlice, output)
	}

	// Convert the output slice to JSON
	jsonOutput, err := json.MarshalIndent(outputSlice, "", "  ")
	if err != nil {
		fmt.Println("Failed to marshal JSON:", err)
		return
	}

	fmt.Println(string(jsonOutput))

	fmt.Println(string(jsonResult))

	// // Write the JSON output to a file
	// err = ioutil.WriteFile("output.json", jsonOutput, 0644)
	// if err != nil {
	// 	fmt.Println("Failed to write JSON file:", err)
	// 	return
	// }

	// fmt.Println("JSON file 'output.json' generated successfully.")

}

// Helper function to parse the CPU quantity and convert it to a float64 value
func parseCPUQuantity(cpuQuantity string) float64 {
	var value float64
	fmt.Sscanf(cpuQuantity, "%fm", &value)
	return value
}
